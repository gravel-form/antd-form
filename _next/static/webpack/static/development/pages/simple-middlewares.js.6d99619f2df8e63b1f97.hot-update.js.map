{"version":3,"file":"static/webpack/static/development/pages/simple-middlewares.js.6d99619f2df8e63b1f97.hot-update.js","sources":["webpack:///./pages/simple-middlewares.tsx"],"sourcesContent":["import * as React from 'react';\nimport Layout from '../layouts/main';\nimport { NextPage } from 'next';\nimport { AntdFormMiddlewareProps } from '../src/share';\nimport { Button, message, Form as AntdForm } from 'antd';\n\nimport DemoForm from '../components/DemoForm';\n\nconst schema = {\n  title: 'A registration form',\n  description: 'A simple form example.',\n  type: 'object',\n  properties: {\n    username: { type: 'string' },\n    firstname: { type: 'string' },\n    lastname: { type: 'string' },\n    email: { type: 'string' },\n  },\n};\n\nconst extraProps = {\n  row: { justify: 'space-between' },\n  properties: {\n    firstname: { col: { span: 11 } },\n    lastname: { col: { span: 11 } },\n  },\n};\n\nconst defaultData = {\n  username: 'jhon',\n  firstname: 'Jhon',\n  lastname: 'Smith',\n};\n\nconst MyButtonsMw: React.FC<AntdFormMiddlewareProps> = (props) => {\n  const {\n    parent,\n    next,\n    onChange,\n    formProps: { defaultData },\n  } = props;\n\n  // if not on the root node, pass the control to the next middleware\n  if (parent) return next(props);\n\n  const [submitting, setSubmitting] = React.useState(false);\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    await require('bluebird').delay(1000);\n    // pactically, should check unmounted here\n    setSubmitting(false);\n    message.success('Submitted!');\n  };\n  const handleClear = () => onChange({});\n  const handleReset = () => onChange(defaultData);\n\n  return (\n    <>\n      {next(props) /* render the body of the form */}\n      <Button type=\"primary\" onClick={handleSubmit} loading={submitting}>\n        Submit\n      </Button>{' '}\n      <Button onClick={handleClear}>Clear</Button> <Button onClick={handleReset}>Reset</Button>\n    </>\n  );\n};\n\nconst MyFormItemTemplate: React.FC<AntdFormMiddlewareProps> = (props) => {\n  const { schema, dataPath, next, errors } = props;\n\n  if (typeof schema === 'boolean') return next(props);\n\n  const error = errors && errors.find(({ dataPath }) => dataPath === id);\n\n  return (\n    <AntdForm.Item\n      label={schema.title || dataPath[dataPath.length - 1]}\n      extra={schema.description}\n      {...(error && { help: error.message })}\n      validateStatus={error ? 'error' : ''}\n      hasFeedback\n    >\n      {next(props)}\n    </AntdForm.Item>\n  );\n};\n\nconst code = `\nconst middlewares = [\n  MyButtonsMw,\n  ExtraPropsMw,\n  ColMw,\n  FieldsetTemplateMw,\n  RowMw,\n  FormItemTemplateMw,\n  ...schemaMws,\n  InputMw,\n  NotSupportedMw,\n];\n\nrender(\n  <Form\n    defaultData={defaultData}\n    layout=\"vertical\"\n    schema={schema}\n    extraProps={extraProps}\n    middlewares={middlewares}\n  />\n);\n`;\n\nconst IndexPage: NextPage = () => {\n  return (\n    <Layout>\n      <DemoForm code={code} scope={{ schema, extraProps, defaultData, MyButtonsMw }} />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAJA;AAYA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAFA;AAQA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}