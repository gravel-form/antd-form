{"version":3,"file":"static/webpack/static/development/pages/steps.js.d7e492f3e04ee453f886.hot-update.js","sources":["webpack:///./components/DemoForm.tsx","webpack:///./middlewares/CheckboxGroupMw.tsx","webpack:///./middlewares/DatePickerMw.tsx","webpack:///./middlewares/InputMw.tsx","webpack:///./middlewares/InputNumberMw.tsx","webpack:///./middlewares/NotSupportedMw.tsx","webpack:///./middlewares/SelectMw.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Card, Row, Col } from 'antd';\n\nimport Form, { withName } from '../Form';\n\nimport { FixedObjectMw, FixedArrayMw, schemaMws } from '../middlewares/share';\n\nimport DatePickerMw from '../middlewares/DatePickerMw';\nimport ExtraPropsMw from '../middlewares/ExtraPropsMw';\nimport FormItemTemplateMw from '../middlewares/FormItemTemplateMw';\nimport ValidateMw from '../middlewares/ValidateMw';\nimport NotSupported from '../middlewares/NotSupportedMw';\nimport ErrorListMw from '../middlewares/ErrorListMw';\nimport InputMw, { TextAreaMw, PasswordMw } from '../middlewares/InputMw';\nimport InputNumberMw from '../middlewares/InputNumberMw';\nimport FieldsetTemplateMw from '../middlewares/FieldsetTemplateMw';\nimport CheckboxGroupMw from '../middlewares/CheckboxGroupMw';\nimport SelectMw from '../middlewares/SelectMw';\nimport { SubmitButtonMw, SubmitButtonWithValidationMw } from '../middlewares/SubmitButtonMw';\nimport RadioGroupMw from '../middlewares/RadioGroupMw';\nimport CheckboxMw from '../middlewares/CheckboxMw';\nimport SwitchMw from '../middlewares/SwitchMw';\nimport RateMw from '../middlewares/RateMw';\nimport SliderMw from '../middlewares/SliderMw';\nimport { RowMw, ColMw } from '../middlewares/GridMw';\n\nimport { LiveProvider, LiveEditor, LiveError, LivePreview } from 'react-live';\n\nimport FormDataViewerMw from '../components/FormDataViewerMw';\n\nconst map: any = {\n  schemaMws,\n  SubmitButtonMw,\n  SubmitButtonWithValidationMw,\n  ValidateMw,\n  ExtraPropsMw,\n  ErrorListMw,\n\n  RowMw,\n  ColMw,\n  FieldsetTemplateMw,\n  FormItemTemplateMw,\n  FixedObjectMw,\n  FixedArrayMw,\n\n  // array, enum, unique\n  CheckboxGroupMw,\n\n  // boolean\n  SwitchMw,\n  CheckboxMw,\n\n  // enum\n  RadioGroupMw,\n  SelectMw,\n\n  // integer\n  RateMw,\n  // number, integer\n  InputNumberMw,\n\n  // string\n  DatePickerMw,\n  TextAreaMw,\n  PasswordMw,\n  InputMw,\n\n  NotSupported,\n\n  // dev\n  FormDataViewerMw,\n};\n\nconst DemoForm: React.FC<{ code: string; scope?: { [key: string]: any } | React.ReactElement }> = ({ code, scope }) => {\n  if (typeof code === 'string') {\n    return (\n      <LiveProvider\n        code={code}\n        scope={{\n          Form,\n          withName,\n          ...map,\n          Ajv: require('ajv'),\n          Antd: require('antd'),\n          ReactAsyncHook: require('react-async-hook'),\n          GravelFormCore: require('../core/src'),\n          Bluebird: require('bluebird'),\n          Lodash: require('lodash'),\n          ...scope,\n        }}\n        noInline={true}\n      >\n        <Row>\n          <Col span={12}>\n            <Card style={{ height: '100vh', overflowY: 'auto' }}>\n              <LiveEditor />\n            </Card>\n          </Col>\n          <Col span={12}>\n            <Card style={{ height: '100vh', overflowY: 'auto' }}>\n              <LiveError />\n              <LivePreview />\n            </Card>\n          </Col>\n        </Row>\n      </LiveProvider>\n    );\n  }\n  return (\n    <Row>\n      <Col span={12}>\n        <Card></Card>\n      </Col>\n      <Col span={12}>\n        <Card>{code}</Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default DemoForm;\n","import * as React from 'react';\nimport get from 'lodash/get';\nimport { Checkbox } from 'antd';\nimport { AntdFormMiddlewareProps } from './share';\n\nexport const CheckboxGroupMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { schema, onChange, extraProps, next } = props;\n\n  if (\n    typeof schema === 'boolean' ||\n    Array.isArray(schema.items) ||\n    typeof schema.items === 'boolean' ||\n    !schema.items ||\n    !schema.items.enum ||\n    !schema.uniqueItems\n  ) {\n    return next(props);\n  }\n  const checkboxValues = schema.items.enum || [];\n  const data = props.data || [];\n\n  return (\n    <Checkbox.Group\n      options={checkboxValues.map((value) => ({ label: value as string, value: value as string }))}\n      value={data}\n      onChange={(value) => onChange(value)}\n      {...get(extraProps, 'props')}\n    />\n  );\n};\n\nexport default CheckboxGroupMw;\n","import * as React from 'react';\nimport get from 'lodash/get';\nimport { DatePicker } from 'antd';\nimport { AntdFormMiddlewareProps } from './share';\nimport moment from 'moment';\n\nexport const DatePickerMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { next, schema, data, onChange, extraProps } = props;\n\n  if (typeof schema === 'boolean' || schema.type !== 'string') return next(props);\n\n  return (\n    <DatePicker\n      style={{ width: '100%' }}\n      value={typeof data === 'string' ? moment(data) : null}\n      onChange={(_, dateString) => {\n        onChange(dateString || undefined);\n      }}\n      {...get(extraProps, 'props')}\n    />\n  );\n};\n\nexport default DatePickerMw;\n","import * as React from 'react';\nimport get from 'lodash/get';\nimport { Input } from 'antd';\nimport { AntdFormMiddlewareProps } from './share';\nconst { TextArea, Password } = Input;\n\nexport const InputMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { next, schema, data, onChange, extraProps } = props;\n  if (typeof schema === 'boolean' || schema.type !== 'string') return next(props);\n  return (\n    <Input\n      value={data || ''}\n      onChange={(e: any) => {\n        onChange(e.target.value || undefined);\n      }}\n      {...get(extraProps, 'props')}\n    />\n  );\n};\n\nexport const TextAreaMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { next, schema, data, onChange, extraProps } = props;\n  if (typeof schema === 'boolean' || schema.type !== 'string') return next(props);\n  return (\n    <TextArea\n      value={data || ''}\n      onChange={(e: any) => {\n        onChange(e.target.value || undefined);\n      }}\n      {...get(extraProps, 'props')}\n    />\n  );\n};\n\nexport const PasswordMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { next, schema, data, onChange, extraProps } = props;\n  if (typeof schema === 'boolean' || schema.type !== 'string') return next(props);\n  return (\n    <Password\n      value={data || ''}\n      onChange={(e: any) => {\n        onChange(e.target.value || undefined);\n      }}\n      {...get(extraProps, 'props')}\n    />\n  );\n};\n\nexport default InputMw;\n","import * as React from 'react';\nimport get from 'lodash/get';\nimport { InputNumber } from 'antd';\nimport { AntdFormMiddlewareProps } from './share';\n\nexport const InputNumberMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { next, schema, data, onChange, extraProps } = props;\n  if (typeof schema === 'boolean' || !(schema.type === 'number' || schema.type === 'integer')) return next(props);\n  const { maximum, minimum } = schema;\n  return (\n    <InputNumber\n      type=\"number\"\n      style={{ width: '100%' }}\n      max={maximum}\n      min={minimum}\n      value={typeof data === 'number' ? data : undefined}\n      onChange={onChange}\n      {...get(extraProps, 'props')}\n    />\n  );\n};\n\nexport default InputNumberMw;\n","import * as React from 'react';\nimport { AntdFormMiddlewareProps, toJSONSchemaPath } from './share';\nimport { Alert } from 'antd';\n\nexport default ({ schemaPath }: AntdFormMiddlewareProps) => (\n  <Alert message={`schema not supported, location ${toJSONSchemaPath(schemaPath)}`} type=\"error\" showIcon />\n);\n","import * as React from 'react';\nimport get from 'lodash/get';\nimport { Select } from 'antd';\nimport { AntdFormMiddlewareProps } from './share';\n\nexport const SelectMw: React.ComponentType<AntdFormMiddlewareProps> = (props) => {\n  const { schema, data: value, onChange, next, extraProps } = props;\n  if (\n    typeof schema === 'boolean' ||\n    !schema.enum ||\n    !(schema.type === 'string' || schema.type === 'number' || schema.type === 'integer') ||\n    schema.enum.find((option) => !['string', 'number'].includes(typeof option))\n  )\n    return next(props);\n\n  return (\n    <Select\n      value={value}\n      style={{ width: '100%' }}\n      onChange={(value: any) => onChange(value)}\n      {...get(extraProps, 'props')}\n    >\n      {schema.enum.map((option) => (\n        <Select.Option key={option as string | number} value={option as string | number}>\n          {option}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default SelectMw;\n"],"mappings":"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","sourceRoot":""}